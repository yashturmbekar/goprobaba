service: myWebsite

frameworkVersion: '2'

plugins:
  - serverless-s3-sync

custom:
  s3Sync:
    - bucketName: gopro.baba
      localDir: dist
  stage: prod
  region: us-east-1    

  # stage: ${opt:stage, 'dev'}
  # region: ${opt:region, 'us-east-1'}
  # client: 
  #   bucketName: gopro.baba
  #   distributionFolder: dist
  #   indexDocument: index.html

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  profile: yash

#To create bucket uncomment below Do not uncomment code of doamain name
# resources:
#   Resources:
#     StaticSite:
#       Type: AWS::S3::Bucket
#       Properties:
#         AccessControl: PublicRead
#         BucketName: gopro.baba
#         WebsiteConfiguration:
#           IndexDocument: index.html
#     StaticSiteS3BucketPolicy:
#       Type: AWS::S3::BucketPolicy
#       Properties:
#         Bucket:
#           Ref: StaticSite
#         PolicyDocument:
#           Statement:
#             - Sid: PublicReadGetObject
#               Effect: Allow
#               Principal: "*"
#               Action:
#               - s3:GetObject
#               Resource:
#                 Fn::Join: [
#                   "", [
#                     "arn:aws:s3:::",
#                     {
#                       "Ref": "StaticSite"
#                     },
#                     "/*"
#                   ]
#                 ]          

# Domain name and cloudfront code
  #   StaticSiteCert:
  #     Type: AWS::CertificateManager::Certificate
  #     Properties:
  #       DomainName: ${self:custom.hostedZoneName}
  #       DomainValidationOptions:
  #       - DomainName: ${self:custom.hostedZoneName}
  #         ValidationDomain: ${self:custom.hostedZoneName}

  #   CloudFrontDistribution:
  #     Type: AWS::CloudFront::Distribution
  #     Properties:
  #       DistributionConfig:
  #         Origins:
  #           - DomainName:
  #               Fn::Join: [
  #                 "", [
  #                   { "Ref": "StaticSite" },
  #                   ".s3.amazonaws.com"
  #                 ]
  #               ]
  #             # It isn't necessary to sue this value; but we need the same
  #             # value for DefaultCacheBehavior.TargetOriginId
  #             Id:
  #               Ref: StaticSite
  #             CustomOriginConfig:
  #               HTTPPort: 80
  #               HTTPSPort: 443
  #               OriginProtocolPolicy: https-only
  #         Enabled: 'true'
  #         Aliases:
  #           - ${self:custom.hostedZoneName}
  #         DefaultRootObject: index.html
  #         CustomErrorResponses:
  #           - ErrorCode: 404
  #             ResponseCode: 200
  #             ResponsePagePath: /index.html
  #         DefaultCacheBehavior:
  #           AllowedMethods:
  #             - GET
  #             - HEAD
  #           TargetOriginId:
  #             Ref: StaticSite
  #           ForwardedValues:
  #             QueryString: 'false'
  #             Cookies:
  #               Forward: none
  #           ViewerProtocolPolicy: redirect-to-https
  #         ViewerCertificate:
  #           AcmCertificateArn:
  #             Ref: StaticSiteCert
  #           SslSupportMethod: sni-only
  #         ## Uncomment the following section in case you want to enable logging for CloudFront requests
  #         # Logging:
  #         #  IncludeCookies: 'false'
  #         #   Bucket: mylogs.s3.amazonaws.com
  #         #   Prefix: myprefix
  #     DependsOn:
  #       - StaticSiteS3BucketPolicy

  #   DnsRecord:
  #     Type: "AWS::Route53::RecordSet"
  #     Properties:
  #       AliasTarget:
  #         DNSName:
  #           Fn::GetAtt:
  #             - CloudFrontDistribution
  #             - DomainName
  #         HostedZoneId: ${self:custom.hostedZoneId}
  #       HostedZoneName: ${self:custom.hostedZoneName}.
  #       Name: ${self:custom.hostedZoneName}.
  #       Type: 'A'

  # Outputs:
  #   StaticSiteS3BucketName:
  #     Value:
  #       Ref: StaticSite
  #   CloudFrontDistribution:
  #     Value:
  #       Fn::GetAtt:
  #         - CloudFrontDistribution
  #         - DomainName

