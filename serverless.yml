service: myWebsite

frameworkVersion: '2'

plugins:
  - serverless-s3-sync

custom:
  s3Sync:
    - bucketName: goprobaba.com
      localDir: dist
  stage: prod
  region: us-east-1
  hostedZoneName: goprobaba.com
  hostedZoneId: Z2FDTNDATAQYW2
  aliasDNSName: s3-website-us-east-1.amazonaws.com

  # stage: ${opt:stage, 'dev'}
  # region: ${opt:region, 'us-east-1'}
  # client: 
  #   bucketName: gopro.baba
  #   distributionFolder: dist
  #   indexDocument: index.html

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  profile: yash
  stackTags:
    serverless:servess: ${self:service}

#To create bucket uncomment below Do not uncomment code of doamain name
resources:
  Resources:

    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: goprobaba.com
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              #Principal: "*"
              Action:
              - s3:GetObject
              Resource: 
                Fn::Join:
                  - /
                  - - Fn::GetAtt:
                        - StaticSite
                        - Arn
                    - '*'
              Principal:
                CanonicalUser: 
                  Fn::GetAtt: 
                    - FrontPageWebsiteOriginAccessIdentity
                    - S3CanonicalUserId
    FrontPageWebsiteOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity to Access Website Bucket
# Domain name and cloudfront code
# resources:
#   Resources:  
    # StaticSiteCert:
    #   Type: AWS::CertificateManager::Certificate
    #   Properties:
    #     DomainName: ${self:custom.hostedZoneName}
    #     DomainValidationOptions:
    #       DomainName: ${self:custom.hostedZoneName}
    #       HostedZoneId: Z04912341XQAM7VFI2VL9
    #       ValidationDomain: ${self:custom.hostedZoneName}

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: #"s3-website-us-east-1.amazonaws.com" #${self:custom.hostedZoneName}.s3-${self:custom.region}.amazonaws.com
                Fn::GetAtt: 
                  - StaticSite
                  - DomainName
              #It isn't necessary to sue this value; but we need the same
              #value for DefaultCacheBehavior.TargetOriginId
              Id:
                Ref: StaticSite
              S3OriginConfig:
                OriginAccessIdentity: 
                  Fn::Join: 
                    - /
                    - - origin-access-identity
                      - cloudfront
                      - !Ref FrontPageWebsiteOriginAccessIdentity  
              # CustomOriginConfig:
              #   HTTPPort: 80
              #   HTTPSPort: 443
              #   OriginProtocolPolicy: https-only
          Enabled: 'true'
          Aliases:
            - ${self:custom.hostedZoneName}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId:
              Ref: StaticSite
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:034589273524:certificate/cddafc3e-22d1-4c9c-80ce-2d3eac3e1253
              #Ref: StaticSiteCert
            SslSupportMethod: sni-only
          # Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #  IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
      DependsOn:
        - StaticSiteS3BucketPolicy

    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName: #${self:custom.aliasDNSName}
            Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
          HostedZoneId: ${self:custom.hostedZoneId}
        HostedZoneName: ${self:custom.hostedZoneName}.
        Name:
          Ref: StaticSite
        Type: 'A'
        #Region: ${self:custom.region}
        #SetIdentifier: ${self:service}-${self:custom.stage}

  Outputs:
    StaticSiteS3BucketName:
      Value:
        Ref: StaticSite
    CloudFrontDistribution:
      Value:
        Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName

